library ieee;
use ieee.std_logic_1164.all;

entity cache_tb is
end entity cache_tb;

architecture Behavioral of cache_tb is

    component cache is
        generic (
            CW_ADDR: integer range 0 to B-1  -- Address offset of critical word within a block
        );
        port (
            clk: in std_logic;
            reset: in std_logic;
            -- Memory interface
            mem_read_addr: in std_logic_vector(31 downto 0);
            mem_read_data: out std_logic_vector(31 downto 0);
            mem_write_addr: in std_logic_vector(31 downto 0);
            mem_write_data: in std_logic_vector(31 downto 0);
            mem_write_en: in std_logic;
            -- Cache interface
            cache_read_addr: in std_logic_vector(31 downto 0);
            cache_read_data: out std_logic_vector(31 downto 0);
            cache_read_valid: out std_logic;
            cache_write_addr: in std_logic_vector(31 downto 0);
            cache_write_data: in std_logic_vector(31 downto 0);
            cache_write_en: in std_logic
        );
    end component;

    signal clk: std_logic := '0';
    signal reset: std_logic := '1';

    -- Cache and memory signals
    signal cache_clk: std_logic;
    signal cache_reset: std_logic;
    signal cache_read_addr: std_logic_vector(31 downto 0);
    signal cache_read_data: std_logic_vector(31 downto 0);
    signal cache_read_valid: std_logic;
    signal cache_write_addr: std_logic_vector(31 downto 0);
    signal cache_write_data: std_logic_vector(31 downto 0);
    signal cache_write_en: std_logic;

    constant MEM_SIZE: integer := 4096;  -- Modify as needed
    signal memory: std_logic_vector(MEM_SIZE-1 downto 0) := (others => '0');  -- Initialize memory

begin

    -- Instantiate cache
    UUT: cache port map (
        clk => cache_clk,
        reset => cache_reset,
        mem_read_addr => cache_read_addr,
        mem_read_data => memory(to_integer(unsigned(cache_read_addr))),  -- Simple memory model
        mem_write_addr => cache_write_addr,
        mem_write_data => cache_write_data,
        mem_write_en => cache_write_en,
        cache_read_addr => cache_read_addr,
        cache_read_data => cache_read_data,
        cache_read_valid => cache_read_valid
    );

    -- Clock generator
    process(clk)
    begin
        if rising_edge(clk) then
            clk <= not clk;
        end if;
    end process;

    -- Test scenario (modify as needed to test different access patterns)
    process(clk)
    begin
        if rising_edge(clk) then
            if reset = '1' then
                reset <= '0';
            elsif reset = '0' then
                -- Access sequence (replace with your test data and critical word address)
                cache_read_addr <= "00000000000000000000000000000001";  -- Sample read address
                cache_write_addr <= "00000000000000000000000000000010";  -- Sample write address
                cache_write_data <= "11001100110011001100110011001100";  -- Sample write data
                cache_write_en <= '1';
                wait for 20 ns;  -- Hold

cache_write_en <= '0';
                wait for 20 ns;

                cache_read_addr <= "00000000000000000000000000000001";  -- Read same address (critical word)
                wait for 20 ns;

                -- Add more accesses here to test different scenarios
                -- ...
            end if;
        end if;
    end process;

    -- Monitor test bench signals
    process(clk)
    begin
        if rising_edge(clk) then
            if reset = '0' then
                -- Monitor cache outputs and memory content (modify as needed)
                report("Cache read addr: " & cache_read_addr & ", Read data: " & cache_read_data & ", Read valid: " & cache_read_valid);
                report("Memory content at " & cache_read_addr & ": " & memory(to_integer(unsigned(cache_read_addr))));
            end if;
        end if;
    end process;

end Behavioral;

